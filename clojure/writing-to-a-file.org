Apply treats positional arguments and list elements equally.

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (apply str "_" "0x" '("a" "b"))
#+END_SRC

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn word-made-from-letters? [word acceptable-letters]
      (every? (fn [letter] (contains? acceptable-letters letter)) word))

  (defn get-words-made-from-letters [letters file-path]
      (let [file-contents (slurp file-path)
            all-words (clojure.string/split-lines file-contents)]
          (filter (fn [word] (word-made-from-letters? word letters)) all-words)))

  (defn write-hex-words-to-file [dictionary-path output-path]
      (let [hex-digits {\a \A \b \B \c \C \d \D \e \E \f \F \o \0 \s \5}
            all-words (get-words-made-from-letters hex-digits dictionary-path)
            hex-words (map (fn [word] (apply str "0x" (map hex-digits word))) all-words)]
          (println all-words)
          (println hex-words)
          (spit output-path (clojure.string/join "\n" hex-words))))

  (write-hex-words-to-file "bigDictionary.txt" "hex-words.txt")
#+END_SRC